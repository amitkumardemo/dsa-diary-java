
                         PROBLEM STATEMENT : 283. Move Zeroes

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 

✅ Approach: Two Pointers (Efficient & Interview-Ready)
🔹 Steps:
Use a pointer insertPos to track the position to insert the next non-zero element.

Traverse the array:

If the element is not 0, place it at insertPos and increment insertPos.

After the loop, fill the remaining positions in the array with 0.

class Solution {
    public void moveZeroes(int[] nums) {
        int insertPos = 0;

        // Step 1: Move all non-zero values to the front
        for (int num : nums) {
            if (num != 0) {
                nums[insertPos++] = num;
            }
        }

        // Step 2: Fill the rest with zeros
        while (insertPos < nums.length) {
            nums[insertPos++] = 0;
        }
    }
}
⏱️ Time & Space Complexity:
Time: O(n) — one full pass for non-zeros + one pass to fill 0s.

Space: O(1) — in-place operation.

📌 Use Cases:
Commonly asked in FAANG interviews.

Great for mastering in-place array manipulation.

Often used to teach sliding window or two-pointer patterns.







